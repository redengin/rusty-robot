//! TBS Crossfire
//!
//! <pre>
//! struct CsrfFrame {
//!     SYNC: u8,
//!     length: u8;
//!     struct Data {
//!         type: FrameType,
//!         payload: [u8; length - 1],
//!     }
//!     /// crc of Data
//!     crc: u8;
//! }
//! </pre>
//! Where CRC is calculated per [CRC-8/DVB-S2](https://www.etsi.org/deliver/etsi_en/302300_302399/302307/01.02.01_60/en_302307v010201p.pdf#page=16)

use nmea::NmeaSentence;

pub const SYNC: u8 = 0xC8;

/// https://github.com/betaflight/betaflight/blob/master/src/main/rx/crsf_protocol.h#L44
pub enum FrameType {
    GPS = 0x02,
    VarioSensor = 0x07,
    BatterySensor = 0x08,
    BaroAltitude = 0x09,
    HEARTBEAT = 0x0B,
    LinkStatistics = 0x14,
    RcChannelsPacked = 0x16,
    SubsetRcChannelsPacked = 0x17,
    LinkStatisticsRx = 0x1C,
    LinkStatisticsTx = 0x1D,
    ATTITUDE = 0x1E,
    FlightMode = 0x21,
    // Extended Header Frames, range: 0x28 to 0x96
    DevicePing = 0x28,
    DeviceInfo = 0x29,
    ParameterSettingsEntry = 0x2B,
    ParameterRead = 0x2C,
    ParameterWrite = 0x2D,
    COMMAND = 0x32,
    // MSP commands
    /// response request using msp sequence as command
    MspReq = 0x7A,
    /// reply with 58 byte chunked binary
    MspResp = 0x7B,
    /// write with 8 byte chunked binary (OpenTX outbound telemetry buffer limit)
    MspWrite = 0x7C,
    /// displayport control command
    DisplayportCmd = 0x7D,
}

/// https://crccalc.com/?crc=123456789&method=CRC-8/DVB-S2&datatype=ascii&outtype=hex
const CRC_TABLE: [u8; 256] = [
    0x00, 0xD5, 0x7F, 0xAA, 0xFE, 0x2B, 0x81, 0x54, 0x29, 0xFC, 0x56, 0x83, 0xD7, 0x02, 0xA8, 0x7D,
    0x52, 0x87, 0x2D, 0xF8, 0xAC, 0x79, 0xD3, 0x06, 0x7B, 0xAE, 0x04, 0xD1, 0x85, 0x50, 0xFA, 0x2F,
    0xA4, 0x71, 0xDB, 0x0E, 0x5A, 0x8F, 0x25, 0xF0, 0x8D, 0x58, 0xF2, 0x27, 0x73, 0xA6, 0x0C, 0xD9,
    0xF6, 0x23, 0x89, 0x5C, 0x08, 0xDD, 0x77, 0xA2, 0xDF, 0x0A, 0xA0, 0x75, 0x21, 0xF4, 0x5E, 0x8B,
    0x9D, 0x48, 0xE2, 0x37, 0x63, 0xB6, 0x1C, 0xC9, 0xB4, 0x61, 0xCB, 0x1E, 0x4A, 0x9F, 0x35, 0xE0,
    0xCF, 0x1A, 0xB0, 0x65, 0x31, 0xE4, 0x4E, 0x9B, 0xE6, 0x33, 0x99, 0x4C, 0x18, 0xCD, 0x67, 0xB2,
    0x39, 0xEC, 0x46, 0x93, 0xC7, 0x12, 0xB8, 0x6D, 0x10, 0xC5, 0x6F, 0xBA, 0xEE, 0x3B, 0x91, 0x44,
    0x6B, 0xBE, 0x14, 0xC1, 0x95, 0x40, 0xEA, 0x3F, 0x42, 0x97, 0x3D, 0xE8, 0xBC, 0x69, 0xC3, 0x16,
    0xEF, 0x3A, 0x90, 0x45, 0x11, 0xC4, 0x6E, 0xBB, 0xC6, 0x13, 0xB9, 0x6C, 0x38, 0xED, 0x47, 0x92,
    0xBD, 0x68, 0xC2, 0x17, 0x43, 0x96, 0x3C, 0xE9, 0x94, 0x41, 0xEB, 0x3E, 0x6A, 0xBF, 0x15, 0xC0,
    0x4B, 0x9E, 0x34, 0xE1, 0xB5, 0x60, 0xCA, 0x1F, 0x62, 0xB7, 0x1D, 0xC8, 0x9C, 0x49, 0xE3, 0x36,
    0x19, 0xCC, 0x66, 0xB3, 0xE7, 0x32, 0x98, 0x4D, 0x30, 0xE5, 0x4F, 0x9A, 0xCE, 0x1B, 0xB1, 0x64,
    0x72, 0xA7, 0x0D, 0xD8, 0x8C, 0x59, 0xF3, 0x26, 0x5B, 0x8E, 0x24, 0xF1, 0xA5, 0x70, 0xDA, 0x0F,
    0x20, 0xF5, 0x5F, 0x8A, 0xDE, 0x0B, 0xA1, 0x74, 0x09, 0xDC, 0x76, 0xA3, 0xF7, 0x22, 0x88, 0x5D,
    0xD6, 0x03, 0xA9, 0x7C, 0x28, 0xFD, 0x57, 0x82, 0xFF, 0x2A, 0x80, 0x55, 0x01, 0xD4, 0x7E, 0xAB,
    0x84, 0x51, 0xFB, 0x2E, 0x7A, 0xAF, 0x05, 0xD0, 0xAD, 0x78, 0xD2, 0x07, 0x53, 0x86, 0x2C, 0xF9,
];

/// [CRC-8/DVB-S2](https://www.etsi.org/deliver/etsi_en/302300_302399/302307/01.02.01_60/en_302307v010201p.pdf#page=16)
fn crc(data: &[u8]) -> u8 {
    let mut crc = 0;
    for b in data {
        crc = CRC_TABLE[(crc ^ b) as usize];
    }
    crc
}

/// https://github.com/betaflight/betaflight/blob/master/src/main/telemetry/crsf.c#L239
pub struct GpsData {
    /// TODO what are the units?
    pub latitude: f32,
    /// TODO what are the units?
    pub longitude: f32,
    /// TODO what are the units?
    pub ground_speed: u16,
    /// TODO what are the units?
    pub ground_speed_course: u16,
    /// TODO what are the units?
    pub altitude: u16,
    pub num_sat: u8,
}
impl From<nmea::Nmea> for GpsData {
    fn from(nmea: nmea::Nmea) -> Self {
        GpsData {
            latitude: nmea.latitude.unwrap_or_default() as f32,
            longitude: nmea.longitude.unwrap_or_default() as f32,
            ground_speed: nmea.speed_over_ground.unwrap_or_default() as u16,
            ground_speed_course: nmea.true_course.unwrap_or_default() as u16,
            altitude: nmea.altitude.unwrap_or_default() as u16,
            num_sat: nmea.num_of_fix_satellites.unwrap_or_default() as u8,
        }
    }
}
pub fn gpsFrame(nmea: &nmea::Nmea) -> [u8; 100] {
    let mut ret: [u8; 100] = [0; 100];
    // TODO implement
    // ret[2..3] = (nmea.latitude.unwrap_or_default() as f32).to_be_bytes();

    ret
}

#[cfg(test)]
mod tests {
    use super::*;

    #[test]
    /// https://crccalc.com/?crc=123456789&method=CRC-8/DVB-S2&datatype=ascii&outtype=hex
    fn csrf_crc() {
        let input = "123456789".as_bytes().trim_ascii_end();
        assert_eq!(crc(input), 0xBC, "failed crc calculation");
    }
}
